Noeud *rechercherValeur(ABR ab, int val){
	if(ab == NULL) return NULL;

	if(ab->valeur == val) return ab;

	if(ab->valeur < val) 
		return rechercherValeur(ab->fd, val);
	else
		return rechercherValeur(ab->fg, val);
}

Noeud *creerFeuille(int val){
	Noeud *n = malloc(sizeof(Noeud));
	n->valeur = val;
	n->fg = NULL;
	n->fd = NULL;
	n->hauteur = 1;
	return n;
}

int hauteur(ABR ab){
	if(ab == NULL) return 0;
	return ab->hauteur;
}

void insereEltn_ss_eq(ABR* ab, int val){
	if(*ab == NULL){
		*ab = creerNoeud(val);
	}else{
		if( (*ab)->valeur >= val){
			insereEltn_ss_eq(&((*ab)->fd),val);
			if(hauteur((*ab)->fd >= hauteur((*ab)->fg)
				(*ab)->hauteur++;
		}else{
			insereEltn_ss_eq(&((*ab)->fd),val);
			if(hauteur((*ab)->fg >= hauteur((*ab)->fd)
				(*ab)->hauteur++;
		}
}

void rotationDroite(ABR *ab){
	ABR r = (*ab);
	ABR g = r->fg;
	ABR d = r->fd;

	r->fg = g->fd;
	g->fd = r;
	*ab = g;
	majhauteur((*ab)->fg));
	majhauteur(*ab);
}

void insererElnt_avec_eq(ABR *ab, int v){
	if(*ab == NULL){
		*ab = creerNoeud(val);
	}else{
		if( (*ab)->valeur >= val){
			insereEltn_avec_eq(&((*ab)->fd),val);
		}else{
			insereEltn_avec_eq(&((*ab)->fd),val);
		}
	hg = hauteur((*ab)->fg;
	hd = hauteur((*ab)->fd;
	(*ab)->hauteur = 1 + max(hg,hd);
	if( hg - hd == 2){
		if( hauteur( (*ab)->fg->fg ) < hauteur( (*ab)->fg->fd ) rotationGauche( &((*ab)->fg));
		rotationDroite(ab);
	}else if ( hg - hd == -2 ){
		if( hauteur( (*ab)->fd->fd ) < hauteur( (*ab)->fd->fd ) rotationGauche( &((*ab)->fg));
		rotationGauche(ab);
	}
}







